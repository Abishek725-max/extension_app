import React from 'react'

const NetworkGraph = ({percentage}) => {
  const totalBoxes = 15;
  const filledBoxes = Math.round((percentage / 100) * totalBoxes);

  const paths = [
    'M12.244 47.79L11.9782 50.16C11.8922 50.9223 11.2356 51.4943 10.4628 51.481L1.47333 51.325C0.591133 51.3095 -0.0878245 50.5461 0.0104456 49.6765L0.461595 45.6591C0.558748 44.7895 1.38958 44.192 2.25503 44.369L11.0591 46.1725C11.8163 46.3274 12.3311 47.0288 12.2451 47.7912L12.244 47.79Z',
    'M14.3723 39.3192L13.6152 41.5829C13.3717 42.311 12.609 42.7347 11.8552 42.5621L3.0958 40.5573C2.23594 40.3604 1.7323 39.473 2.01036 38.6432L3.29457 34.8062C3.57263 33.9764 4.51067 33.5626 5.31916 33.9133L13.5526 37.4915C14.2606 37.799 14.6169 38.5912 14.3734 39.3181L14.3723 39.3192Z',
    'M18.2315 31.4727L17.0154 33.5306C16.6245 34.1923 15.7892 34.4501 15.089 34.1259L6.94156 30.3608C6.142 29.9912 5.83602 29.0198 6.28158 28.2652L8.34302 24.7767C8.78859 24.0222 9.79363 23.8109 10.5106 24.3209L17.8127 29.5166C18.4414 29.9636 18.6223 30.8111 18.2315 31.4727Z',
    'M23.6527 24.5919L22.0312 26.3544C21.5097 26.9209 20.6398 27.0017 20.0211 26.5403L12.8418 21.1787C12.1372 20.652 12.0412 19.6397 12.6364 18.9924L15.3846 16.0051C15.9787 15.359 17.006 15.359 17.6001 16.0051L23.6527 22.5916C24.1731 23.158 24.1731 24.0243 23.6527 24.5908V24.5919Z',
    'M30.4008 18.9794L28.4455 20.3691C27.8168 20.8161 26.948 20.7154 26.441 20.1367L20.5437 13.4131C19.9641 12.7526 20.0836 11.7424 20.8016 11.2324L24.1171 8.87574C24.834 8.36568 25.8391 8.57811 26.2846 9.33268L30.8229 17.0222C31.2138 17.6838 31.0318 18.5313 30.4031 18.9783L30.4008 18.9794Z',
    'M38.1794 14.8788L35.975 15.8359C35.2659 16.1434 34.4384 15.8657 34.0632 15.1952L29.7058 7.40393C29.2781 6.6394 29.6064 5.67462 30.4149 5.32389L34.1514 3.70189C34.9599 3.35116 35.898 3.76496 36.176 4.59587L39.0013 13.0521C39.2447 13.7802 38.8885 14.5712 38.1794 14.8788Z',
    'M46.6468 12.4691L44.2894 12.9504C43.5312 13.1053 42.7797 12.6627 42.553 11.9303L39.9254 3.41204C39.6674 2.5756 40.1911 1.70043 41.0555 1.52341L45.051 0.70688C45.9154 0.529855 46.7462 1.12842 46.8434 1.99806L47.8327 10.8515C47.9176 11.6138 47.4039 12.3142 46.6457 12.4691H46.6468Z',
    'M55.4351 11.8574L53.0286 11.843C52.2547 11.8386 51.6115 11.2511 51.5445 10.4877L50.7617 1.61428C50.6846 0.742429 51.3815 -0.00550154 52.2637 3.0494e-05L56.343 0.0243714C57.2252 0.0299035 57.9131 0.785579 57.8249 1.65632L56.9348 10.5197C56.8578 11.2821 56.2079 11.8618 55.434 11.8574H55.4351Z',
    'M64.1599 13.0698L61.8092 12.5598C61.0532 12.396 60.5474 11.689 60.6423 10.9278L61.7389 2.08654C61.8461 1.21801 62.6847 0.630512 63.5468 0.817494L67.5324 1.6816C68.3945 1.86858 68.9081 2.75039 68.6401 3.58351L65.9087 12.0696C65.6742 12.7999 64.9159 13.2325 64.1599 13.0687V13.0698Z',
    'M72.4405 16.0528L70.2484 15.0703C69.5437 14.7539 69.1976 13.9584 69.4488 13.2337L72.3768 4.81172C72.6638 3.98523 73.6074 3.58139 74.4115 3.94208L78.129 5.60833C78.933 5.96902 79.2502 6.93712 78.8135 7.69612L74.3612 15.4343C73.9782 16.1004 73.1462 16.3681 72.4416 16.0517L72.4405 16.0528Z',
    'M79.9136 20.6754L77.975 19.2625C77.3518 18.8077 77.1799 17.9591 77.5785 17.3019L82.2095 9.66661C82.664 8.91647 83.6713 8.71732 84.3826 9.23511L87.6691 11.6305C88.3804 12.1483 88.4876 13.1606 87.9003 13.8134L81.9214 20.4662C81.4066 21.0383 80.5367 21.129 79.9136 20.6743V20.6754Z',
    'M86.2542 26.7373L84.655 24.956C84.1413 24.3829 84.1514 23.5166 84.6785 22.9567L90.8103 16.4422C91.4122 15.8027 92.4396 15.8149 93.0259 16.4676L95.7372 19.4881C96.3235 20.142 96.2163 21.1533 95.5049 21.6711L88.2609 26.9464C87.6378 27.4001 86.7678 27.3093 86.253 26.7373H86.2542Z',
    'M91.1838 33.9721L89.9934 31.8998C89.6104 31.2337 89.8025 30.3884 90.4367 29.9492L97.8014 24.8409C98.5251 24.3397 99.5267 24.5621 99.9634 25.3222L101.982 28.8351C102.419 29.5952 102.102 30.5622 101.297 30.9228L93.1034 34.5906C92.3988 34.9059 91.5669 34.6382 91.1838 33.9721Z',
    'M94.4867 42.0655L93.7563 39.7929C93.5218 39.0627 93.887 38.275 94.5995 37.9762L102.875 34.4966C103.688 34.1547 104.621 34.5796 104.889 35.4127L106.126 39.2641C106.394 40.0972 105.88 40.979 105.017 41.1649L96.2332 43.0646C95.4772 43.2283 94.7201 42.7946 94.4855 42.0644L94.4867 42.0655Z',
    'M96.0185 50.6611L95.7817 48.2879C95.7058 47.5255 96.2273 46.8296 96.9878 46.6836L105.813 44.9852C106.68 44.8182 107.504 45.4256 107.59 46.2963L107.992 50.3192C108.079 51.19 107.391 51.9456 106.509 51.9501L97.5182 51.9987C96.7444 52.0032 96.0944 51.4234 96.0185 50.66V50.6611Z'
  ];

  return (
    <>
      <svg width="108" height="52" viewBox="0 0 108 52" className={`svg-paths filled-${filledBoxes} w-full h-full`} fill="none" xmlns="http://www.w3.org/2000/svg">
        <g clipPath="url(#clip0_248_652)">
          {paths.map((pathData, index) => (
            <path
              key={index}
              d={pathData} // Different path data for each element
              className="path"
              fill="#B5B6BA"
            />
          ))}
      </g>
      <defs>
      <clipPath id="clip0_248_652">
      <rect width="108" height="52" fill="white"/>
      </clipPath>
      </defs>
      </svg>
    </>
  )
}

export default NetworkGraph;
